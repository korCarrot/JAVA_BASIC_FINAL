<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<!-- 웹 요청을 직접 처리할 컨트롤러의 매핑을 설정(HandlerMapping)하거나 뷰를 어떻게 처리할지 설정(ViewResolver) -->



	<!-- 뷰리졸버, js나 이미지 같은 리소스 경로, 애너테이션 설정 등이 프로젝트 생성시 자동으로 만들어짐 -->


	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 컨트롤러 매핑 설정 -->
	<!-- - @Controller, @RequestMapping 같은 애너테이션을 사용할 때 필요한 빈 객체들을 자동으로 등록합니다. 
		- 또한 핸들러 매핑과 핸들러 어댑터의 빈 객체도 대신 등록해 줍니다
		
		 RequestMappingHandlerMapping
		  - 웹 요청 URL과 자바 클래스인 컨트롤러를 매핑시켜주는 핸들러 매핑 클래스 - 클라이언트의 요청 URL에 대해서 어떤 컨트롤러가 처리할지를 
		결정하는 역할 
		
		RequestMappingHandlerAdapter
		 - 핸들러 매핑 클래스에 의해 결정된 컨트롤러를 호출하는 핸들러 아답터 클래스 
		 - 디스패처서블릿의 처리 요청을 변환해서 컨트롤러에게 전달하고, 컨트롤러의 응답 결과를 디스패처서블릿이 요구하는 형식으로	변환 -->
	<annotation-driven />




	<!--  클래스 레벨에서 @RequestMapping을 처리 -->
	<beans:bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
		
	<!--  메서드 레벨에서 @RequestMapping을 처리 -->
	<beans:bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />


	<!-- 자바 클래스의 빈 객체 설정 
	자바 클래스를 생성할 때 빈 객체를 자동으로 등록하기 위해서 설정
	<component-scan> 요소를 이용
	스프링 웹 MVC에서 사용할 빈 객체를 일일이 xml에 등록하지 않아도 필요한 애너테이션을 자동으로 인식할 수 있게 함	
	-->
	<!-- <context:component-scan base-package="com.myspring.pro27" /> -->
	<!-- <context:component-scan base-package="com.myspring.pro27a" /> -->
	<context:component-scan base-package="com.myspring" />


	<!-- 정적 리소스 설정 
	요청에 대해 js, css 이미지 등 리소스 파일을 매핑
	서버에서 앞서 처리될 필요가 없는 정적 리소스 파일을 처리하는 역할
	
	-->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory 
		효율적으로 서비스를 제공하여 /resources/**에 대한 HTTP GET 요청을 처리합니다. 
		${webappRoot}/resources 디렉터리에 정적 리소스를 	추가합니다. -->
	<!-- mapping  : 웹 요청 경로 패턴을 설정, 컨텍스트 경로를 제외한 나머지 부분의 경로와 매핑
	     location : 웹 애플리케이션 내에서 실제 요청 경로의 패턴에 해당하는 자원 위치를 설정, 위치가 여러 곳이면 각 위치를 쉼표로 구분
	     cahe-period : 웹 브라우저에 캐시 시간 관련 응답 헤더를 전송, 초 단위로 캐시 시간을 지정, 값이 0이면 웹 브라우저가 캐시하지 않도록 하고, 값을 설정하지 않으면 캐시 관련 응답 헤더를 전송하지 않습니다.
	-->
	<resources mapping="/resources/**" location="/resources/" />



	<!-- 뷰( JSP 웹 페이지)와 관련 있는 빈 객체를 설정 -->


	<!-- 뷰 매핑 설정
	사용자에게 응답 결과를 보여 주려고 컨트롤러가 모델을 반환하고 디스패처 서블릿이 jsp 파일을 찾을 수 있게 함	
	 -->
	<!-- @Controller가 렌더링하기 위해 선택한 뷰를 /WEB-INF/views 디렉토리에 .jsp 리소스로 확인합니다. -->
	<!-- 
	   <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
	
		prefix 속성
		JSP 파일이 위치한 경로를 나타내는 접두어		
	     
		<beans:property name="prefix" value="/WEB-INF/views/" /> 
		
		뷰 이름의 뒤에 ‘.jsp’를 붙여서 jsp 파일을 나타내는 접미어로 생략 가능		
		<beans:property name="suffix" value=".jsp" /> 
		
	</beans:bean> -->

	<!-- 뷰리졸버를 InternalResourceViewResolver 대신 UrlBasedViewResolver(타일즈)로 대체 -->
	<beans:bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</beans:bean>

	<!-- Helper class to configure Tiles2 for the Spring Framework. -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>classpath:tiles/*.xml</beans:value>

			</beans:list>

		</beans:property>


		<beans:property name="preparerFactoryClass"
			value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory" />


	</beans:bean>




	<!-- 멀티파트 리졸버 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="52428800" />
		<beans:property name="maxInMemorySize" value="1000000" />
		<beans:property name="defaultEncoding" value="utf-8" />
	</beans:bean>


	<!-- Interceptor 설정 -->










</beans:beans>